name: "Build, Test, Publish & Enhance Repository UI"

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write
  checks: write
  id-token: write

jobs:
  test-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository (Full History)"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Set up JDK"
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: "Ensure gradlew is Executable"
        run: chmod +x ./gradlew

      - name: "Cache Gradle Directories"
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: "Run Dependency Updates"
        run: ./gradlew dependencyUpdates --no-daemon --stacktrace --parallel

      - name: "Run Tests, Quality Checks"
        run: ./gradlew clean test patchPluginXml spotlessCheck detekt jacocoTestReport --no-daemon --stacktrace --parallel

      - name: "Publish Test Report"
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: "JUnit Tests"
          path: build/test-results/test/*.xml
          reporter: "java-junit"
          list-suites: 'all'
          list-tests: 'all'
          max-annotations: '10'
          fail-on-error: 'true'
          fail-on-empty: 'true'

  release:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout Repository (Full History)"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Set up JDK"
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: "Ensure gradlew is Executable"
        run: chmod +x ./gradlew

      - name: "Cache Gradle Directories"
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: "Configure Git Remote"
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: "Auto-tag if pushing to 'main' without a tag"
        if: startsWith(github.ref, 'refs/heads/main')
        run: |
          TAG="auto-v$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}"
          echo "Generated tag: $TAG"
          git tag "$TAG"
          git push origin "$TAG"
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

      - name: "Set RELEASE_TAG"
        run: |
          if [ -z "${RELEASE_TAG}" ]; then
            if [[ "${GITHUB_REF}" == "refs/tags/"* ]]; then
              TAG_NAME="${GITHUB_REF#refs/tags/}"
              echo "Using existing tag: $TAG_NAME"
              echo "RELEASE_TAG=$TAG_NAME" >> $GITHUB_ENV
            else
              echo "No tag found. Using fallback 'dev-build'"
              echo "RELEASE_TAG=dev-build" >> $GITHUB_ENV
            fi
          fi

      - name: "Minimal Build (skip tests) & Publish"
        run: |
          ./gradlew clean buildPlugin patchPluginXml --no-daemon --stacktrace --parallel
          ls -lah build/distributions

      - name: "Upload Plugin Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: plugin-distribution
          path: build/distributions/*.zip

      - name: "Publish Plugin"
        run: |
          ./gradlew publishPlugin --no-daemon --stacktrace
        env:
          ORG_GRADLE_PROJECT_intellijPlatformPublishingToken: ${{ secrets.JB_PLUGIN_REPOSITORY_TOKEN }}

      - name: "Create GitHub Release"
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Release ${{ env.RELEASE_TAG }}"
          body: "Plugin published. Automated release."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-ui:
    if: github.event_name != 'pull_request'
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: "Update Repository Topics and Description"
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.CLIPCRAFT_GH_WRITE_TOKEN }}
        with:
          script: |
            const topics = ['plugin','ci','automation','release'];
            await github.rest.repos.replaceAllTopics({
              owner: context.repo.owner,
              repo: context.repo.repo,
              names: topics
            });
            await github.rest.repos.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              description: "Automated Build, Test, Publish & UI Enhancements workflow powered by prebuilt actions."
            });
      - name: "Create or Update Release Announcement"
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.CLIPCRAFT_GH_WRITE_TOKEN }}
          issue-number: 1
          body: |
            :tada: A new release [${{ env.RELEASE_TAG }}](https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }}) is available.
            - Pushed directly to main or triggered by tag.
            - Minimal build performed. 
            - Repository UI updated (topics, description).
