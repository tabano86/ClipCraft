name: Build and Publish Plugin

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Cache Gradle Directories
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Run Build Tasks
        run: |
          # Combine tasks to reduce repeated configuration overhead.
          bash ./gradlew clean test buildPlugin patchPluginXml --parallel --stacktrace

      - name: Upload Plugin Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-artifact
          path: build/distributions/

  release:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Cache Gradle Directories
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Set up Git config with PAT for Release
        env:
          RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          # Use the dedicated RELEASE_TOKEN to ensure push (tag creation) is permitted.
          git remote set-url origin https://${{ secrets.RELEASE_TOKEN }}@github.com/tabano86/ClipCraft.git

      - name: Fetch and Sync Remote Tags
        run: |
          git fetch --prune --tags
          git reset --hard origin/main

      - name: Run Release and Publish Plugin
        env:
          RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          JB_PLUGIN_REPOSITORY_TOKEN: ${{ secrets.JB_PLUGIN_REPOSITORY_TOKEN }}
        run: |
          # Run both tasks in one Gradle invocation to minimize overhead.
          bash ./gradlew release publishPlugin \
            -Dorg.jetbrains.intellij.pluginRepository.publish.token=$JB_PLUGIN_REPOSITORY_TOKEN \
            --parallel --stacktrace
