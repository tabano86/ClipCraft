name: Build and Publish Plugin

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: write
  id-token: write

jobs:
  release:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Verify JB_PLUGIN_REPOSITORY_TOKEN is Set
        run: |
          if [ -z "$JB_PLUGIN_REPOSITORY_TOKEN" ]; then
            echo "Error: JB_PLUGIN_REPOSITORY_TOKEN is not set."
            exit 1
          fi
        env:
          JB_PLUGIN_REPOSITORY_TOKEN: ${{ secrets.JB_PLUGIN_REPOSITORY_TOKEN }}

      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Make gradlew Executable
        run: chmod +x ./gradlew

      - name: Cache Gradle Directories
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Configure Git Remote for Tag Push
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          # Use the built-in GITHUB_TOKEN (which now has contents: write permission)
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Sync Repository with Remote
        run: |
          git fetch --prune --tags
          git reset --hard origin/main

      - name: Run Release and Publish Plugin with Retry
        # Set the environment variable expected by the Gradle plugin
        env:
          ORG_GRADLE_PROJECT_intellijPlatformPublishingToken: ${{ secrets.JB_PLUGIN_REPOSITORY_TOKEN }}
        run: |
          max_attempts=3
          attempt=1
          until ./gradlew release publishPlugin --no-daemon --stacktrace --parallel; do
            if [ $attempt -ge $max_attempts ]; then
              echo "Release and publish failed after $attempt attempts."
              exit 1
            fi
            echo "Attempt $attempt failed, retrying in 10 seconds..."
            sleep 10
            attempt=$((attempt + 1))
          done
