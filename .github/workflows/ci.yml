name: "Build, Test, Publish & Enhance Repository UI"

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    tags: [ "v*" ]
  workflow_dispatch:

permissions:
  contents: write
  checks: write
  id-token: write

env:
  JAVA_VERSION: "17"
  JAVA_DIST: "temurin"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true"

defaults:
  run:
    shell: bash

jobs:
  # --- Pull Request Validation ---
  test-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: "Checkout Repository (Full History)"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Set up JDK ${{ env.JAVA_VERSION }}"
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: "Ensure gradlew is Executable"
        run: chmod +x ./gradlew

      - name: "Print Gradle & Java Versions"
        run: |
          ./gradlew --version
          java -version

      - name: "Cache Gradle Directories"
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: "Run Dependency Updates Check"
        run: ./gradlew dependencyUpdates --stacktrace --parallel

      - name: "Run Tests, Code Quality, and Coverage"
        run: ./gradlew clean test patchPluginXml spotlessCheck detekt jacocoTestReport --stacktrace --parallel

      - name: "Publish Test Report"
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: "JUnit Tests"
          path: build/test-results/test/*.xml
          reporter: java-junit
          list-suites: all
          list-tests: all
          max-annotations: 20
          fail-on-error: true
          fail-on-empty: true

  # --- Release Job ---
  release:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: "Checkout Repository (Full History)"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Set up JDK ${{ env.JAVA_VERSION }}"
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: "Ensure gradlew is Executable"
        run: chmod +x ./gradlew

      - name: "Print Gradle & Java Versions"
        run: |
          ./gradlew --version
          java -version

      - name: "Cache Gradle Directories"
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: "Configure Git Remote"
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: "Auto-tag if on main branch without a tag"
        if: startsWith(github.ref, 'refs/heads/main')
        run: |
          TAG="auto-v$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}"
          echo "Generated tag: $TAG"
          git tag "$TAG"
          git push origin "$TAG"
          echo "RELEASE_TAG=$TAG" >> $GITHUB_ENV

      - name: "Set RELEASE_TAG if not set"
        run: |
          if [ -z "${RELEASE_TAG}" ]; then
            if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              TAG_NAME="${GITHUB_REF#refs/tags/}"
              echo "Using existing tag: $TAG_NAME"
              echo "RELEASE_TAG=$TAG_NAME" >> $GITHUB_ENV
            else
              echo "No tag found. Using fallback 'dev-build'"
              echo "RELEASE_TAG=dev-build" >> $GITHUB_ENV
            fi
          fi

      - name: "Compute and Print Plugin Version"
        run: ./gradlew printVersion --stacktrace

      - name: "Run Release Build & Publish Plugin"
        env:
          ORG_GRADLE_PROJECT_intellijPlatformPublishingToken: ${{ secrets.JB_PLUGIN_REPOSITORY_TOKEN }}
        run: |
          ./gradlew clean patchPluginXml publishPlugin --stacktrace --parallel
          ls -lah build/distributions

      - name: "Upload Plugin Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: plugin-distribution
          path: build/distributions/*.zip

      - name: "Create GitHub Release"
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "Release ${{ env.RELEASE_TAG }}"
          body: "Plugin published via automated workflow."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # --- Repository Metadata Update ---
  update-ui:
    if: github.event_name != 'pull_request'
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: "Update Repository Topics and Description"
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.CLIPCRAFT_GH_WRITE_TOKEN }}
        with:
          script: |
            const topics = ['plugin', 'ci', 'automation', 'release'];
            await github.rest.repos.replaceAllTopics({
              owner: context.repo.owner,
              repo: context.repo.repo,
              names: topics
            });
            await github.rest.repos.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              description: "Automated Build, Test, Publish & UI Enhancements workflow powered by prebuilt actions."
            });

      - name: "Post Release Announcement"
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.CLIPCRAFT_GH_WRITE_TOKEN }}
          issue-number: 1
          body: |
            :tada: A new release [${{ env.RELEASE_TAG }}](https://github.com/${{ github.repository }}/releases/tag/${{ env.RELEASE_TAG }}) is available.
            - Released via automated workflow.
